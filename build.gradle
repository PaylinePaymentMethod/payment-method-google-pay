import org.apache.tools.ant.filters.EscapeUnicode
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "org.sonarqube" version "2.8"
    id "org.owasp.dependencycheck" version "6.0.1"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'

description = 'payment-method-google-pay'
group 'com.payline.payment.google-pay'
version '1.9'


compileJava.options.encoding = 'UTF-8'

def externalFileName = "$projectDir/.external"
if (file(externalFileName).exists()) {
    apply from: "external.gradle"
} else {
    apply from: "monext.gradle"
}


ext {
    paymentMethodApiVersion = '1.14'
    paymentMethodIntegrationVersion = '1.4'
    releaseDirectoryPath = 'D:/build'
}

configurations {
    fatJarTest
}

dependencies {
    compileOnly("com.payline:payment-method-api:$paymentMethodApiVersion")

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
    implementation(group: 'com.google.http-client', name: 'google-http-client', version: '1.40.1') {
        transitive = false
    }
    implementation(group: 'org.json', name: 'json', version: '20201115') {
        transitive = false
    }

    implementation(group: 'com.google.crypto.tink', name: 'tink', version: '1.5.0') {
        transitive = false
    }

    implementation('com.google.crypto.tink:apps-paymentmethodtoken:1.5.0') {
        transitive = false
    }

    implementation(group: 'joda-time', name: 'joda-time', version: '2.10.13') {
        transitive = false
    }

    implementation(group: 'com.google.guava', name: 'guava', version: '31.0-jre') {
        transitive = false
    }

    implementation(group: 'io.opencensus', name: 'opencensus-api', version: '0.28.0') {
        transitive = false
    }
    implementation(group: 'io.opencensus', name: 'opencensus-contrib-http-util', version: '0.28.0') {
        transitive = false
    }

    implementation(group: 'io.grpc', name: 'grpc-context', version: '1.41.0') {
        transitive = false
    }

    testImplementation group: "junit", name: "junit", version: "4.13.2"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testImplementation "com.payline:payment-method-api:${paymentMethodApiVersion}"
    testImplementation "com.payline:payment-method-integration:${paymentMethodIntegrationVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.5.0'

}

dependencyCheck {
    format 'ALL'
    cve {
        urlBase = 'https://jindus.intra.monext.fr/nist-data-mirror/nvdcve-1.1-%d.json.gz'
        urlModified = 'https://jindus.intra.monext.fr/nist-data-mirror/nvdcve-1.1-modified.json.gz'
    }
}

assemble.dependsOn shadowJar

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-api:2.13.3'))
        exclude(dependency('org.apache.logging.log4j:log4j-core:2.13.3'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-params:5.5.0'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-api:5.5.0'))
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

task buildToLocal(type: Copy) {
    dependsOn shadowJar
    from shadowJar
    into "${releaseDirectoryPath}"
}

task printVersion {
    doLast {
        println version
    }
}

/* Replace tokens in resources files after compilation */
processResources {
    filesMatching('messages_fr.properties') {
        filter(EscapeUnicode)
    }
    filesMatching('release.properties') {
        filter(ReplaceTokens, tokens: [
                'version': project.version.replaceFirst("-.*", ""),
                'date'   : new Date().format("dd/MM/yyyy")
        ])
    }
}

test.exclude '**/*IT.class'