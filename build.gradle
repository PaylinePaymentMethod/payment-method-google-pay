import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id "org.sonarqube" version "2.6.1"
    id "org.owasp.dependencycheck" version "3.3.1"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'

description = 'payment-method-google-pay'
group 'com.payline.payment.google.pay'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    paymentMethodApiVersion = '1.0-RC3'
    paymentMethodIntegrationVersion = "1.0-RC3"
    mockitoVersion = '2.19.0'
    releaseDirectoryPath = 'D:/build'
}

repositories {
    mavenLocal()
    mavenCentral()
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    repositories {
        mavenLocal()
/**
 if (project.version.endsWith('-SNAPSHOT')) {
 url nexusSnapshotUrl
 } else {
 url nexusPublicUrl
 }
 credentials {
 username mavenUser
 password mavenPassword
 }
 */
    }
}

dependencies {
    compileOnly("com.payline:payment-method-api:$paymentMethodApiVersion")

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    //implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'
    //implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.10'
    //implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
    implementation group: 'com.google.crypto.tink', name: 'apps-paymentmethodtoken', version: '1.2.0'

    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    testImplementation group: "junit", name: "junit", version: "4.12"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.21.0'
    testImplementation "com.payline:payment-method-api:${paymentMethodApiVersion}"
    testImplementation "com.payline:payment-method-integration:${paymentMethodIntegrationVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.3'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.13.0'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.13.0'
}

dependencyCheck {
    format 'ALL'
}

assemble.dependsOn shadowJar

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-api:2.11.0'))
        exclude(dependency('org.apache.logging.log4j:log4j-core:2.11.0'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-params:5.0.3'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-api:5.0.3'))
        exclude(dependency('org.seleniumhq.selenium:selenium-server:3.13.0'))
        exclude(dependency('org.seleniumhq.selenium:selenium-support:3.13.0'))
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

task buildToLocal(type: Copy) {
    dependsOn shadowJar
    from shadowJar
    into "${releaseDirectoryPath}"
}

task printVersion {
    doLast {
        println version
    }
}

/* Replace tokens in resources files after compilation */
processResources {
    filter ReplaceTokens, tokens: [
            "version": project.version.replace("-SNAPSHOT", ""),
            "date": new Date().format("dd/MM/yyyy")
    ]
}

test.exclude '**/*IT.class'

sonarqube {
    properties {
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property 'sonar.dependencyCheck.htmlReportPath', "${project.buildDir}/reports/dependency-check-report.html"

        property 'sonar.organization', 'thales-META-INF.services-monext'
        property 'sonar.host.url', 'https://sonarcloud.io'

    }
}
